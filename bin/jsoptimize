#!/usr/bin/env python3

import sys, os

# Extend PYTHONPATH with 'lib'
sys.path.insert(0, os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), os.pardir, "lib")))

from jasy.parser.Parser import parse

from jasy.core import Permutation
from jasy.core import DeadCode

from jasy.optimizer import CombineDeclarations
from jasy.optimizer import LocalVariables
from jasy.optimizer import CryptPrivates
from jasy.optimizer import BlockReducer
from jasy.optimizer import UnusedCleaner

from jasy.core.Translation import Translation
from jasy.core.Localization import Localization

from jasy.process.Variables import scan
from jasy.process.Compressor import compress


def jsoptimize(source, filename=None, format=True):
    values = {
        "js.Variant.VERSION" : "0.3",
        "js.Variant.DEBUG" : "true",
        "js.Variant.LOCAL_STORAGE" : "true",
        "js.Variant.NATIVE_JSON" : "true",
        "js.Variant.THEME" : '"blueish"',
        "js.Variant.LOCALE" : '"de_DE"',
        
        # qooxdoo specific
        "qx.debug" : '"off"',
        "qx.dynlocale" : '"off"',
        "qx.client" : '"webkit"',
        "qx.application" : '"qx.application.Standalone"',
        
        # has.js specific
        "string-trim" : "true",
        "function-bind" : "true"
    }
    
    translation = Translation("de_DE", table={
        "Good %1" : "Guten %1",
        "Hello World" : "Hallo Welt",
        "Short" : "Kurz",
        "Thank you for the flowers" : "Danke f√ºr die Blumen",
        "You have got a new mail" : "Sie haben eine neue Mail",
        "You have got new mails" : "Sie haben neue Mails",
        "You have got %1 new mails" : "Sie haben %1 neue Mails",
        "Chat (noum)" : "Unterhaltung",
        "Chat (noum) %1" : "Unterhaltung %1"
    })
    
    localization = Localization("de_DE")
    
    tree = parse(source, filename)
    
    Permutation.Permutation(values).patch(tree)
    DeadCode.cleanup(tree)

    translation.patch(tree)
    localization.patch(tree)
    
    scan(tree)

    UnusedCleaner.optimize(tree)
    BlockReducer.optimize(tree)
    
    CombineDeclarations.optimize(tree)
    LocalVariables.optimize(tree)

    CryptPrivates.optimize(tree)
    
    return compress(tree, format=format)


if __name__ == "__main__":
    for fname in sys.argv[1:]:
        print(jsoptimize(open(fname, encoding="utf-8").read(), fname))
