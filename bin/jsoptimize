#!/usr/bin/env python3

import sys, os, logging

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# Extend PYTHONPATH with 'lib'
sys.path.insert(0, os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), os.pardir, "lib")))

from js.parser.Parser import parse

from js.optimizer import CombineDeclarations
from js.optimizer import LocalVariables
from js.optimizer import ValuePatch
from js.optimizer import DeadCode
from js.optimizer import CryptPrivates
from js.optimizer import BlockReducer
from js.optimizer import UnusedCleaner

from js.Variables import scan
from js.Compressor import compress


def jsoptimize(source, filename=None):
    values = {
        "js.Variant.VERSION" : "0.3",
        "js.Variant.DEBUG" : "true",
        "js.Variant.LOCAL_STORAGE" : "true",
        "js.Variant.NATIVE_JSON" : "true",
        "js.Variant.THEME" : '"blueish"',
        "js.Variant.LOCALE" : '"de_DE"',
        
        # qooxdoo specific
        "qx.debug" : '"off"',
        "qx.client" : '"webkit"',
        
        # has.js specific
        "string-trim" : "true",
        "function-bind" : "true"
    }
    
    tree = parse(source, filename)
    
    #ValuePatch.patch(tree, values)
    DeadCode.optimize(tree)
    
    scan(tree)
    
    UnusedCleaner.optimize(tree)
    BlockReducer.optimize(tree)
    
    CombineDeclarations.optimize(tree)
    LocalVariables.optimize(tree)

    #CryptPrivates.optimize(tree, "xx")
    
    return compress(tree)


if __name__ == "__main__":
    print(jsoptimize(open(sys.argv[1], encoding="utf-8").read(), sys.argv[1]))
