#!/usr/bin/env python3

import sys, os, logging

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# Extend PYTHONPATH with 'lib'
sys.path.insert(0, os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), os.pardir, "lib")))

from jasy.parser.Parser import parse

from jasy.optimizer import CombineDeclarations
from jasy.optimizer import LocalVariables
from jasy.optimizer import ValuePatch
from jasy.optimizer import DeadCode
from jasy.optimizer import CryptPrivates
from jasy.optimizer import BlockReducer
from jasy.optimizer import UnusedCleaner

from jasy.process.Variables import scan
from jasy.process.Compressor import compress


def jsoptimize(source, filename=None):
    values = {
        "js.Variant.VERSION" : "0.3",
        "js.Variant.DEBUG" : "true",
        "js.Variant.LOCAL_STORAGE" : "true",
        "js.Variant.NATIVE_JSON" : "true",
        "js.Variant.THEME" : '"blueish"',
        "js.Variant.LOCALE" : '"de_DE"',
        
        # qooxdoo specific
        "qx.debug" : '"off"',
        "qx.dynlocale" : '"off"',
        "qx.client" : '"webkit"',
        "qx.application" : '"qx.application.Standalone"',
        
        # has.js specific
        "string-trim" : "true",
        "function-bind" : "true"
    }
    
    tree = parse(source, filename)
    
    ValuePatch.patch(tree, values)
    DeadCode.optimize(tree)
    
    scan(tree)
    
    UnusedCleaner.optimize(tree)
    BlockReducer.optimize(tree)
    
    CombineDeclarations.optimize(tree)
    LocalVariables.optimize(tree)

    CryptPrivates.optimize(tree)
    
    return compress(tree)


if __name__ == "__main__":
    print(jsoptimize(open(sys.argv[1], encoding="utf-8").read(), sys.argv[1]))
